@model Kookaburra.ViewModels.Chat.RoomViewModel

<h1>chat room</h1>

<div class="row" data-bind="visible: currentChat != null">
    <div class="col-sm-6 col-sm-offset-3" data-bind="with: currentChat">
        <div class="panel panel-color panel-success chat">
            <!-- Add class "collapsed" to minimize the panel -->
            <div class="panel-heading text-center">
                <h3 class="panel-title col-sm-12">
                    Chat with <span data-bind="text: visitorName"></span>
                    <br />
                    <small> Started at <span data-bind="text: conversationStartTime"></span> on <span data-bind="text: conversationStartTime"></span> </small>
                </h3>
            </div>

            <div class="panel-body">

                <ul class="conversation-messages ps-scrollbar ps-scroll-down ps-container ps-active-y">
                    <li data-bind="foreach: messages">

                        <div class="row">
                            <div class="col-sm-2 chat-author" data-bind="text: author">
                                
                            </div>
                            <div class="col-sm-8 chat-message" data-bind="text: text">
                                                                
                            </div>
                            <div class="col-sm-2 chat-time" data-bind="text: time">
                               
                            </div>
                        </div>

                    </li>
                </ul>

                <div class="chat-message">
                    <textarea data-bind="value: $parent.newText" class="form-control" placeholder="Enter your message..."></textarea>
                </div>

            </div>
        </div>
    </div>
    <div class="col-sm-2 col-sm-offset-1" data-bind="visible: conversations().length > 0">
        <div class="xe-widget xe-conversations conversations">
            <div class="xe-header">
                <div class="xe-icon">
                    <i class="linecons-comment"></i>
                </div>
                <div class="xe-label">
                    <h3>
                        Conversations
                    </h3>
                </div>
            </div>
            <div class="xe-body">

                <ul class="list-unstyled">

                    <li data-bind="foreach: conversations" >
                        <div class="conversation-item" data-bind="css: {active: isCurrent}">
                            <a href="#" class="xe-user-name" data-bind="click: $parent.switchChat">
                                <div class="xe-comment-entry">
                                    <img src="/images/user-2.png" class="img-circle" width="40">

                                    <div class="xe-comment">
                                        <strong data-bind="text: visitorName"></strong>
                                        <p></p>
                                    </div>
                                </div>
                            </a>
                        </div>
                     
                    </li>

                </ul>

            </div>
        </div>
    </div>
</div>

<div class="row" data-bind="visible: conversations().length == 0">
    <div class="col-sm-12">
        <h1>There is currently no chats</h1>
    </div>
</div>


<script type="text/javascript">

    function Message(data) {
        this.id = ko.observable(data.id);
        this.author = ko.observable(data.author);
        this.sender = ko.observable(data.sender);
        this.text = ko.observable(data.text);
        this.time = ko.observable(data.time);
    }

    function Conversation(data) {
        this.visitorId = ko.observable(data.visitorId);
        this.visitorName = ko.observable(data.visitorName);
        this.conversationStartTime = ko.observable(data.conversationStartTime);
        this.location = ko.observable(data.location);
        this.visitorUrl = ko.observable(data.visitorUrl);
        this.messages = ko.observableArray([]);
        this.isCurrent = ko.observable(data.isCurrent);
    }

    function ViewModel() {

        var self = this;

        self.operatorName = '@Model.OperatorName';
        self.newText = ko.observable("");
        self.conversations = ko.observableArray([]);
        self.currentChat = ko.computed(function () {           
            var result = $.grep(self.conversations(), function (e) { return e.isCurrent() == true; });
            if (result.length > 0) {
                return result[0];
            } else {
                return null;
            }
        });
        self.switchChat = function (conversation) {

            for (var i = 0; i < self.conversations().length; i++) {
                self.conversations()[i].isCurrent(false);
            }        

            conversation.isCurrent(true);
        };

        var chatHubProxy = $.connection.chatHub;

        //------------------- INCOMMING MESSAGE --------------------
        chatHubProxy.client.addNewMessageToPage = function (name, message, time, sender, clientId) {
            // Add the message to the chat.

        };

        //------------------- Visitor CONNECTED --------------------
        chatHubProxy.client.clientConnected = function (clientId, name, time, location, currentUrl) {


            self.conversations.push(new Conversation(
                {
                    visitorId: clientId,
                    visitorName: name,
                    conversationStartTime: time,
                    location: location,
                    visitorUrl: currentUrl,
                    isCurrent: (self.conversations().length == 0 ? true : false)
                }))

        };

        //------------------- Visitor DISCONNECTED --------------------
        chatHubProxy.client.clientDisconnected = function (clientId, name, time) {

        };

        // ---------------------- OPERATOR DISCONNECTED -------------------
        $.connection.hub.disconnected(function () {
            alert('You were disconnected from the messaging server. Please refresh the page.');
        });

        // Start the connection.
        $.connection.hub.start().done(function () {
            chatHubProxy.server.connectOperator().done(function () { });

            // SEND MESSAGE ON ENTER PRESS
            $(document).keypress(function (e) {
                if (e.which == 13) {

                }
            });

            // DISCONNECT A Visitor
            $("body").on("click", "button.disconnect", function (e) {
                var _clientId = $(this).closest('.chat-client[data-client-id]').attr('data-client-id');
                var name = $(this).closest('.client-info .client-name').val();

                if (confirm("Are you sure you want to disconnect " + name + "?")) {
                    chatHubProxy.server.disconnectClient(_clientId);
                }
            });
        });
    }

    ko.applyBindings(new ViewModel());

</script>


@section scripts
{
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/knockout-3.4.0.js"></script>
}